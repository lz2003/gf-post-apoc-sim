#BlueJ class context
comment0.target=AnimatedCharacter
comment0.text=\n\ The\ Animated\ Character\ superclass\ is\ designed\ to\ help\ manage\ animations\ for\ 2d\ sprites\n\ in\ Greenfoot.\ It\ implements\ TIME-BASED\ (rather\ than\ Greenfoot\ act-based)\ \n\ frame\ changing\ and\ moving\ to\ create\ both\ smoothness\ and\ preciseness.\ \n\ <p>\n\ If\ you\ have\ any\ questions,\ please\ email\ me\:\n\ <p>\n\ <a\ href\="mailto\:jordan.cohen@yrdsb.ca">jordan.cohen@yrdsb.ca</a>\n\ <p>\n\ Inherit\ from\ this\ class\ to\ use\ it.\ See\ Player\ as\ an\ example\ of\ how\ to\ use\ it\ with\n\ player\ controls.\ Enemy\ demonstrates\ how\ this\ can\ be\ applied\ to\ a\ computer\ controlled\n\ character.\n\ </p>\n\ <p>Please\ know\ that\ I\ am\ a\ teacher,\ not\ a\ developer.\ I'm\ creating\ this\ in\ my\ spare\ time,\n\ and\ as\ it\ grows\ in\ complexity,\ bugs\ are\ sure\ to\ arise.\ If\ you\ find\ any,\ please\ help\ me\ by\ \n\ sending\ me\ detailed\ reports\!\ If\ you\ have\ ideas,\ you\ are\ welcome\ to\ send\ me\ constructive\n\ feedback\ and\ suggestions.</p>\n\ <p>My\ code\ is\ yours\ to\ use,\ for\ free,\ for\ any\ purpose.\ I\ only\ ask\ that\ you\ credit\ me\n\ in\ your\ credits.</p>\n\ Features\:<ul>\n\ <li>Directional\ Movement</li>\n\ <li>Click-to-move\ (move\ toward\ point,\ then\ stop)</li>\n\ <li>Animation\ and\ movement\ based\ on\ time,\ not\ acts,\ so\ you\ should\ see\ consistent\n\ \ \ \ \ rates\ of\ movement\ between\ Actors\ even\ if\ your\ game\ and\ your\ CPU\ cannot\ maintain\n\ \ \ \ \ a\ smooth\ framerate.</li>\n\ \ \ \ \ </li></ul>\n\ \ \ \ \ <p>\n\ \ \ \ \ OPTIONAL\ include\ this\ method\ if\ you\ want\ to\ be\ notified\ when\ an\ animation\ is\ complete\:\ </p>\n\ \ \ \ \ \ \ <pre>\ \ \ protected\ void\ terminalAnimationComplete(){\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ attacking\ \=\ false;\n\ \ \ \ \ \ \ \ \ \ }</pre>\n\ \n\ <h2>Version\ Notes</h2>\n\ \n\ \n\ <p><b>v0.9.0\:</b>\ (April\ 2020)</p>\n\ <ul>\n\ \ <li>\ Collision\ system\ implemented.\ SimplePlayer\ still\ works\ without\ it,\ ComplexPlayer\ now\ uses\ it.</li>\n\ \ <li>\ Continuing\ small\ improvements</li>\n\ </ul>\ \n\ \n\ <p><b>v1.0.1\ </b></p>\n\ <ul>\n\ \ <li>\ Cleaned\ up,\ big\ time\!</li>\n\ \ <li>\ FIXED\ layers\ can\ now\ be\ removed\ /\ reset.\n\ \ <li>\ Basic\ bug\ testing\ -\ please\ give\ feedback\ if\ you\ encounter\ bugs\!</li>\n\ </ul>\ \n\ \n\ <p><b>v2.0.0\ (alpha)\ </b></p>\n\ <ul>\n\ \ <li>\ Removed\ the\ Dot\ class,\ a\ carryover\ from\ the\ old\ days\ that\ didn't\ fit\ at\ all\ here.\ This\ should\ have\ no\ impact\ on\n\ \ \ \ \ \ \ backward\ compatibility\ as\ it\ was\ always\ only\ privately\ accessible</li>\n\ </ul>\n\ \n\ <h2>\ To-Do\:\ </h2>\n\ <ul>\n\ \ <li>\ Implement\ built-in\ collisions\ within\ the\ movement\ methods,\ on\ or\ off\ based\ on\ collisionEnabled\ </li>\n\ \ <li>\ Stepback\ function\ to\ be\ improved\ along\ with\ the\ removal\ of\ the\ Dot</li>\n\ \ <li>\ Consider\ combining\ stopMoving\ and\ stepBack(Actor)</li>\n\ \ <li>\ Improve\ instructions</li>\n\ </ul>\n\ \ \n\ \n\ @author\ Mr.\ Jordan\ Cohen,\ PETHS\n\ @version\ 2.0.1(a)\ -\ October\ 31,\ 2020\n
comment1.params=
comment1.target=AnimatedCharacter()
comment1.text=\n\ Default\ constructor\ -\ must\ be\ called\ via\ super()\ in\ your\ object's\ Constructor.\n
comment10.params=image
comment10.target=void\ setSpriteSheet(greenfoot.GreenfootImage)
comment10.text=\n\ \ Simplified\ way\ to\ set\ your\ image.\n\ \ \n\ \ This\ avoid\ needing\ to\ specify\ a\ layer\ and\ is\ ideal\ for\ beginners.\n\ \ \n\ \ This\ actually\ sets\ the\ 0th\ (bottom)\ layer,\ in\ case\ you\ want\ to\ add\ to\ \n\ \ it\ later.\ This\ also\ clears\ any\ existing\ layers.\n\ \ \n\ \ @param\ image\ \ \ \ The\ sprite\ sheet\ that\ you\ want\ to\ set\ as\ the\ image\ for\ this\ character\n\ \n
comment11.params=
comment11.target=greenfoot.GreenfootImage\ getSpriteSheet()
comment12.params=
comment12.target=greenfoot.GreenfootImage\ getStartingImage()
comment13.params=layer\ image
comment13.target=void\ setLayer(int,\ greenfoot.GreenfootImage)
comment13.text=\n\ Set\ layers\ for\ your\ image.\n\ \n\ The\ 0th\ layer\ is\ on\ the\ bottom\ and\ will\ be\ drawn\ first.\ The\ highest\ \n\ layer\ is\ on\ top\ and\ will\ be\ drawn\ last.\ By\ default\ there\ are\ 12\ layers,\n\ but\ you\ can\ add\ more\ by\ changing\ the\ MAX_LAYERS\ constant.\n\ \n\ The\ supplied\ graphics\ should\ all\ be\ Spritesheets,\ and\ you\ should\ consider\n\ which\ layers\ should\ be\ drawn\ on\ top\ of\ which\ for\ the\ best\ visual\ effect.\n\ \n\ @param\ layer\ The\ layer\ number\ you\ want\ to\ place\ this\ spritesheet\ at\n\ @param\ image\ The\ sprite\ sheet\ that\ you\ want\ to\ place\ at\ this\ layer\n
comment14.params=layers
comment14.target=void\ setLayers(greenfoot.GreenfootImage[])
comment14.text=\n\ Set\ layers\ for\ your\ image\ all\ at\ once\ with\ an\ array\ of\ GreenfootImage..\n\ \n\ The\ 0th\ layer\ is\ on\ the\ bottom\ and\ will\ be\ drawn\ first.\ The\ highest\ \n\ layer\ is\ on\ top\ and\ will\ be\ drawn\ last.\ By\ default\ there\ are\ 12\ layers,\n\ but\ you\ can\ add\ more\ by\ changing\ the\ MAX_LAYERS\ constant.\ Your\ input\ array\n\ should\ not\ have\ more\ than\ MAX_LAYERS\ elements.\ Extra\ elements\ will\ be\ ignored.\n\ You're\ free\ to\ experiment\ with\ more\ layers,\ just\ change\ the\ constant\ above.\n\ \n\ Note\ that\ this\ will\ remove\ any\ existing\ Layers\ before\ setting.\n\ \n\ The\ supplied\ graphics\ should\ all\ be\ Spritesheets,\ and\ you\ should\ consider\n\ which\ layers\ should\ be\ drawn\ on\ top\ of\ which\ for\ the\ best\ visual\ effect.\n\ \n\ @param\ layers\ \ \ \ The\ array\ of\ images\ to\ set\ as\ drawing\ layers.\n\ \n
comment15.params=anim\ spriteSheet
comment15.target=void\ refresh(Animation,\ greenfoot.GreenfootImage)
comment15.text=\n\ Custom\ refresh\ -\ specify\ your\ own\ spriteSheet,\ and\ refresh\ this\ animation\ to\ reflect\ it.\n\ Remember\ to\ apply\ trim()\ after,\ if\ required,\ \ as\ this\ does\ not\ trim\ the\ images.\n\ \n\ @param\ \ \ anim\ \ \ \ The\ Animation\ object\ that\ you\ wish\ to\ refresh.\n\ @param\ \ \ GreenfootImage\ \ The\ image\ object\ to\ use\ to\ update\ this\ Animation\n
comment16.params=anim
comment16.target=void\ refresh(Animation)
comment16.text=\n\ Standard\ refresh\ -\ uses\ the\ spritesheet\ built\ into\ this\ AnimatedCharacter.\ This\ should\n\ be\ called\ after\ making\ changes\ to\ the\ SpriteSheet,\ so\ that\ they\ will\ change\ in\ the\ \n\ active\ Animation.\ Remember\ to\ apply\ trim()\ after,\ if\ required,\ \ as\ this\ does\ not\ trim\ the\ images.\n\ \n\ @param\ \ \ anim\ \ \ \ The\ Animation\ object\ that\ you\ wish\ to\ refresh.\ This\ will\ use\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ default\ /\ built-in\ spriteSheet,\ which\ you\ may\ have\ just\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ changed\ using\ setLayer,\ or\ otherwise.\n
comment17.params=anim
comment17.target=void\ setPrimaryAnimation(java.lang.String)
comment18.params=anim
comment18.target=void\ setPrimaryAnimation(Animation)
comment19.params=moveSpeed\ framesPerSecond
comment19.target=void\ changeSpeed(int,\ int)
comment19.text=\n\ Set\ the\ movement\ speed\ (in\ pixels\ per\ second)\ and\ the\ animation\ rate\n\ (in\ frames\ per\ second)\n
comment2.params=
comment2.target=void\ enableCollision()
comment2.text=\n\ This\ turns\ on\ the\ Collision\ system.\ If\ you\ have\ not\ already\ called\ setCollider\ to\ create\ a\ \n\ custom\ Collider,\ this\ method\ will\ create\ one\ for\ you\ that\ is\ the\ same\ width\ as\ this\ Actor's\n\ current\ image,\ so\ set\ an\ image\ before\ calling\ this.\ \n\ \n\ Note\ that\ this\ Collision\ system\ adds\ extra\ Actors\ to\ the\ World\ and\ may\ have\ a\ performance\ cost.\n\ This\ is\ not\ always\ the\ best\ way\ to\ do\ collision\ detection,\ and\ you\ should\ consider\ your\ own\n\ implementation\ of\ the\ Greenfoot\ collision\ detection\ methods\ in\ your\ subclass\ if\ they\ work\ and\ are\ simple.\n\ \n\ The\ primary\ benefit\ of\ this\ system\ is\ that\ Colliders\ don't\ have\ to\ be\ the\ same\ size\ as\ the\ Actors\ they\n\ are\ attached\ to.\n\ \n\ The\ secondary\ benefit\ of\ this\ system\ is\ that\ it\ has\ a\ method\ that\ does\ collision\ detection\ based\ on\ the\ direction\n\ that\ the\ object\ is\ facing\ (based\ on\ it's\ Direction\ direction\ object).\ \n
comment20.params=distance
comment20.target=void\ move(double)
comment20.text=\n\ Move\ forward\ by\ the\ specified\ exact\ distance\ in\ the\ current\ direction.\n
comment21.params=a
comment21.target=void\ moveTowards(greenfoot.Actor)
comment21.text=\n\ Move\ towards\ a\ specified\ actor\ at\ the\ current\ speed\ and\ framerate.\ \n\ \n\ @param\ a\ the\ Actor\ to\ move\ toward\ \n
comment22.params=targetX\ targetY
comment22.target=void\ moveTowards(int,\ int)
comment22.text=\n\ Move\ towards\ a\ given\ location\ at\ the\ current\ speed\ and\ framerate.\n\ \n\ @param\ targetX\ \ \ the\ desired\ x\ coordinate\ to\ move\ to\n\ @param\ targetY\ \ \ the\ desired\ y\ coordinate\ to\ move\ to\n
comment23.params=dx\ dy
comment23.target=void\ setDirection(double,\ double)
comment23.text=\n\ Based\ on\ a\ desired\ change\ in\ x\ and\ y,\ choose\ a\n\ facing\ direction.\n\ \n\ This\ will\ be\ called\ as\ part\ of\ "turn\ towards"\ to\n\ ensure\ that\ the\ correct\ animation\ frame\ is\ chosen\n
comment24.params=dirX\ dirY
comment24.target=void\ moveInDirection(int,\ int)
comment24.text=\n\ <p>Make\ this\ AnimatedCharacter\ move\ in\ a\ specified\ direction.</p>\n\ \n\ <p><b>Instructions\:</b></p>\n\ <ol>\n\ <li>Subclasses\ can\ just\ set\ direction\ once\ and\ the\ animated\ character\n\ will\ keep\ moving\ until\ stopped\ or\ direction\ changes.</li>\n\ <li>Subclasses\ can\ call\ this\ repeatedly\ -\ if\ direction\ doesn't\ change,\n\ these\ method\ calls\ will\ be\ ignored</li>\n\ <li>\ This\ method\ does\ not\ actually\ perform\ movement\ -\ only\ set\ direction\n\ variables.\ This\ is\ intended\ -\ the\ super.act()\ call\ in\ the\ subclass\ will\ run\n\ last\ in\ the\ subclass'\ act()\ method\ and\ perform\ the\ actual\ movement.</li>\n\n\ <li>Intended\ to\ receive\ a\ 1\ or\ -1\ for\ for\ ONE\ of\ the\ parameters,\ and\ a\ \n\ zero\ (0)\ for\ the\ other.\ This\ method\ does\ not\ allow\ diagonal\ movement.</li>\n\ </ol>\n\ @param\ dirX\ \ The\ direction\ for\ x\ movement.\ Should\ be\ -1,\ 0\ or\ 1.\n\ @param\ dirY\ \ The\ direction\ for\ y\ movement.\ Should\ be\ -1,\ 0\ or\ 1.\ \n
comment25.params=direction
comment25.target=void\ moveInDirection(AnimatedCharacter.Direction)
comment25.text=\n\ \n
comment26.params=
comment26.target=boolean\ isMoving()
comment27.params=direction
comment27.target=void\ stopMoving(AnimatedCharacter.Direction)
comment28.params=
comment28.target=void\ stopMoving()
comment29.params=rotation
comment29.target=void\ moveBySetRotation(int)
comment3.params=troubleshooting
comment3.target=void\ enableCollision(boolean)
comment3.text=\n\ The\ troubleshooting\ version\ \ -does\ the\ same\ as\ above\ but\ also\ allows\ a\ programmer\ to\n\ trigger\ visible\ Collision\ highlighting\ which\ helps\ a\ lot\ with\ troubleshooting.\n
comment30.params=x\ y
comment30.target=void\ setLocation(int,\ int)
comment30.text=\n\ Override\ the\ default\ setLocation\ method\ because\ the\ backing\n\ variables\ xx\ and\ yy\ need\ to\ be\ updated,\ otherwise\ they\ will\n\ immediately\ move\ the\ player\ back\ every\ time\ it\ tries\ to\ move.\n\ \n\ Warning\ -\ this\ will\ ROUND\ xx\ and\ yy.\ Using\ this\ all\ the\ time\n\ may\ prevent\ certain\ movement.\ Use\ the\ double\ version\ instead.\n
comment31.params=x\ y
comment31.target=void\ setLocation(double,\ double)
comment32.params=c\ distance
comment32.target=void\ move(Coordinate,\ double)
comment33.params=animationName\ removeAfterAnimation\ stopMoving\ d\ repeats
comment33.target=void\ runTerminalAnimation(java.lang.String,\ boolean,\ boolean,\ AnimatedCharacter.Direction,\ int)
comment33.text=\n\ Runs\ an\ animation\ that\ will\ come\ to\ an\ end\ when\ it's\ finished\ doing\ it's\ thing.\n\ \n\ @param\ animationName\ The\ name\ of\ the\ Animation\ (it\ must\ have\ been\ added\ to\ animations\ already)\n\ @param\ removeAfterAnimation\ \ Should\ this\ AnimatedCharacter\ delete\ itself\ when\ this\ Animation\ is\ complete?\n\ @param\ stopMoving\ \ \ \ Should\ this\ AnimatedCharacter\ stop\ moving\ BEFORE\ performing\ this\ operation?\n\ @param\ d\ \ \ \ \ What\ direction\ is\ this\ Animation\ currently\ facing?\n\ @param\ repeats\ \ \ How\ many\ times\ should\ this\ animation\ play?\ Ususally\ 1.\n
comment34.params=
comment34.target=void\ stepBack()
comment34.text=\n\ Called\ to\ avoid\ getting\ stuck\ on\ an\ object\ -\ when\ you\ detect\ that\ you\n\ have\ hit\ an\ object,\ call\ this\ method\ to\ go\ back\ to\ the\ previous\ position,\n\ so\ your\ Actor\ won't\ get\ stuck\ in\ a\ loop\ where\ it's\ touching\ the\ object\ so\n\ it\ cannot\ move.\ See\ Player\ class\ for\ example.\n
comment35.params=images
comment35.target=void\ setCurrentImages(greenfoot.GreenfootImage[])
comment35.text=\n\ Step\ back\ from\ the\ specified\ Actor\n\n\ \ \ \ public\ void\ stepBack\ (Actor\ a){\n\n\ \ \ \ dot.setLocation\ (getX(),\ getY());\n\ \ \ \ if\ (collisionEnabled){\n\ \ \ \ if\ (a\ instanceof\ AnimatedCharacter){\n\ \ \ \ AnimatedCharacter\ ac\ \=\ (AnimatedCharacter)a;\n\ \ \ \ while\ (Collider.checkTouching(this.getCollider(),\ ac.getCollider())){\n\ \ \ \ dot.turnTowards\ (a.getX(),\ a.getY());\n\ \ \ \ dot.turn(180);\n\ \ \ \ dot.move\ (1);\n\ \ \ \ setLocation\ (dot.getX(),\ dot.getY());\n\ \ \ \ }\n\ \ \ \ }\n\n\ \ \ \ }\ else\ {\n\ \ \ \ while\ (this.intersects(a)){\n\ \ \ \ dot.turnTowards\ (a.getX(),\ a.getY());\n\ \ \ \ dot.turn(180);\n\ \ \ \ dot.move\ (1);\n\ \ \ \ setLocation\ (dot.getX(),\ dot.getY());\n\ \ \ \ }\n\ \ \ \ }\n\ \ \ \ }\n
comment36.params=
comment36.target=void\ act()
comment37.params=
comment37.target=void\ terminalAnimationComplete()
comment38.params=
comment38.target=void\ movementComplete()
comment39.params=
comment39.target=boolean\ isTerminal()
comment4.params=width\ height\ xOffset\ yOffset
comment4.target=void\ setCollider(int,\ int,\ int,\ int)
comment4.text=\n\ Specify\ a\ size\ (width\ x\ height)\ and\ an\ offset\ (position\ relative\ to\ \n\ this\ object)\ for\ my\ new\ rectangular\ Collider.\n\ \n\ @param\ width\ the\ desired\ collision\ rectangle's\ width\n
comment5.params=
comment5.target=void\ disableCollision()
comment5.text=\n\ If\ using\ the\ Collision\ System,\ this\ will\ turn\ off\ the\ system\n\ and\ delete\ this\ AnimatedCharacter's\ Collider.\n
comment6.params=
comment6.target=void\ positionCollider()
comment6.text=\n\ Internal\ method\ to\ insert\ Collider\ in\ the\ World\ if\ it's\ not\ there\n\ already,\ and\ to\ position\ it\ correctly\ offset\ from\ this\ object.\n
comment7.params=
comment7.target=boolean\ isColliding()
comment8.params=
comment8.target=greenfoot.Actor\ checkCollision()
comment9.params=
comment9.target=Collider\ getCollider()
numComments=40
